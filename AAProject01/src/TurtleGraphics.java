/*
 * File: TurtleGraphics.java
 * -------------------------
 * This file represents the starter file for the TurtleGraphics application.
 * Your job in Assignment #4 is to complete this application by implementing
 * the execute and replaceAction methods.  You also need to implement the
 * TurtleScanner class in the file TurtleScanner.java.
 */

import acm.program.*;
import acm.util.ErrorException;
import com.sun.javaws.exceptions.InvalidArgumentException;

public class TurtleGraphics extends GraphicsProgram {

/* Constants to set the application size */
	public static final int APPLICATION_WIDTH = 1000;
	public static final int APPLICATION_HEIGHT = 600;

/*
 * Initializes the application.  Programs call the init() method before
 * laying out the components in the window and the run() method after the
 * layout is complete.  This application is driven entirely by events
 * generated by the buttons and menus and does not need a run() method.
 */
	public void init() {
		turtle = new GTurtle();
		add(turtle);
		ui = new TurtleGraphicsUI();
		ui.start();
	}

/*
 * Executes a turtle program, which consists of a string of commands.
 * Each command consists of a single letter, optionally followed by an
 * integer.  The commands you must implement for this assignment are
 *
 *    F#       Moves forward the specified number of pixels (default = 50)
 *    L#       Turn left the specified number of degrees (default = 90)
 *    R#       Turn right the specified number of degrees (default = 90)
 *    U        Raise the pen so that moving no longer draws a line
 *    D        Lower the pen to resume line drawing
 *    X#{cmds} Execute the block of commands the specified number of times
 */
	public void execute(String str) {
		TurtleTokenizer tortal = new TurtleTokenizer(str);
		while (tortal.hasMoreTokens()) {
			String cmd = tortal.nextToken();
			if (cmd.charAt(0) == 'F') {
				// move forward
				if (cmd.length() == 1) { turtle.forward(50); }
				else {
					// get the numbers associated
					turtle.forward(getNumbers(cmd, 1));
				}
			} else if (cmd.charAt(0) == 'L') {
				// rotate left
				if (cmd.length() == 1) { turtle.left(90); }
				else {
					// get the numbers associated
					turtle.left((getNumbers(cmd, 1) % 360));
				}
			} else if (cmd.charAt(0) == 'R') {
				// rotate right
				if (cmd.length() == 1) { turtle.right(90); }
				else {
					// get the numbers associated
					turtle.right((getNumbers(cmd, 1) % 360));
				}
			} else if (cmd.charAt(0) == 'U') {
				// raise pen
				turtle.penUp();
			} else if (cmd.charAt(0) == 'D') {
				// lower pen
				turtle.penDown();
			} else if (cmd.charAt(0) == 'X') {
				int repeats = getNumbers(cmd,1);
				cmd = tortal.nextToken();
				if(cmd.length() < 3) { continue; }
				cmd = cmd.substring(1,cmd.length() - 1);
				for (int i = 0; i < repeats; i++) {
					execute(cmd);
				}
			}
		}
	}
	// get the proceeding numbers from the start position
	private int getNumbers(String cmd, int start) {
		// trivial case
		if (cmd.length() == 2) { return (int) cmd.charAt(1); }
		// several numbers
		StringBuilder numbers = new StringBuilder(cmd.length()-1);
		for (int i = start; i < cmd.length() && isNumber(cmd, i) ; i++) {
			numbers.append(cmd.charAt(i));
		}
		return Integer.parseInt(numbers.toString());
	}
	private boolean isNumber(String cmd, int index) {
		return (cmd.charAt(index) >= '0' && cmd.charAt(index) <= '9');
	}
/*
 * Implements the Replace button action, which replaces all instances of a
 * pattern string in the current file with a replacement string.  The
 * pattern and replacement strings are taken from the replacement field in
 * the user interface, where they appear as pattern->replacement.   
 */
	public void replaceAction() {
        // get the command from the ui
		String replace = ui.getReplacementField();
        replace = clean(replace);
        if (!validInput(replace)) { throw new IllegalArgumentException(); }
        boolean error = false;
        // determine if valid error message
        for(int i = 0; i < replace.length(); i++){
            if(replace.charAt(i) == '-' && replace.charAt(i+1) == '>'){
                error = true;
            }
        }
        if(!error){
            throw new ErrorException("Missing ->");
        }
        // valid now get what the original is
        StringBuilder original = new StringBuilder();
        for (int i = 0; i < replace.length(); i++) {
            if(Character.isLetterOrDigit(replace.charAt(i))){
                original.append(replace.charAt(i));
            }
            if(replace.charAt(i) == '-') { break; }
        }
        // from after the -> get what the replacement is
        StringBuilder replacement = new StringBuilder();
        for (int i = original.length() + 1; i < replace.length(); i++) {
            if(Character.isLetterOrDigit(replace.charAt(i))){
                replacement.append(replace.charAt(i));
            } else { break; }
        }
        // now replace the old one with the new one
        String oldProgramText = ui.getProgramText();
        String newProgramText = replaceAll(oldProgramText,
                original.toString(), replacement.toString());
        ui.setProgramText(newProgramText);
	}


/* Private instance variables */
	
	private GTurtle turtle;         /* The GTurtle object        */
	private TurtleGraphicsUI ui;    /* The user-interface object */
    // returns the number of white spaces in a string
    private int numSpaces(String s) {
        int numSpaces = 0;
        for (int i = 0; i < s.length(); i++) {
            if (Character.isWhitespace(s.charAt(i))) {
                numSpaces++;
            }
        }
        return numSpaces;
    }
    // removes all whitespaces and turns all characters to lowercase
    private String clean(String s) {
        int numCharacters = s.length() - numSpaces(s);
        StringBuilder str = new StringBuilder(numCharacters);
        for (int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(!Character.isWhitespace(c)){		// ignore whitespaces
                c = Character.toUpperCase(c);   // ensure all same case
                str.append(c);
            }
        }
        return str.toString();
    }
    // Tests to see that this is a valid
    private boolean validInput(String s) {
        int yolo = 0;
        // ensure brackets are good.
        for (int i = 0; i < s.length(); i++) {
            if (Character.compare(s.charAt(i),'{') == 0) {
                yolo++;
            } else if(Character.compare(s.charAt(i),'}') == 0) {
                yolo--;
            }
            if (yolo < 0) { return false; }
        }
        return yolo == 0;
    }
    private String replaceAll(String tokens, String olds, String news){
        StringBuilder result = new StringBuilder();
        int c_i = 0;
        // traverse the whole tokens, looking for the pattern of the old
        while (c_i < tokens.length()){
            // if possible pattern check
            if (tokens.charAt(c_i) == olds.charAt(0)) {
                int inc = c_i, // looks ahead
                        found = 0;  // how many matches thusfar
                for (int i = 0; i < olds.length(); i++) {
                    if (inc < tokens.length() && tokens.charAt(inc) == olds.charAt(i)) {
                        found++;
                        inc++;
                    } else {
                        break;
                    }
                }
                if (found == olds.length()) {
                    result.append(news);
                } else {
                    result.append(tokens.substring(c_i, inc));
                }
                c_i = inc;
            } else {
                // otherwise, just get current token
                result.append(tokens.charAt(c_i++));
            }
        }
        return result.toString();
    }
    public static void main(String[] args) {
        TurtleGraphics roger = new TurtleGraphics();
//        System.out.println("HelloWorld");
//        String replace = "X3 {F81 L120}";
//        System.out.println(replace);
//        replace = roger.replaceAll(replace, "F81", "F27 R60 F27 L120 F27 R60 F27");
//        System.out.println(replace);
//        replace = roger.replaceAll(replace, "F27", "F9 R60 F9 L120 F9 R60 F9");
//        System.out.println(replace);
//        replace = roger.replaceAll(replace, "F9", "F3 R60 F3 L120 F3 R60 F3");
//        System.out.println(replace);
//        replace = roger.replaceAll(replace, "F3", "F1 R60 F1 L120 F1 R60 F1");
//        System.out.println(replace);
//
//        System.out.println("");
//        System.out.println("Done");
        roger.init();
        String command = "g10r2 F3 X3 {FF4 x3{R3} L12 r }c11r f23 x2{uf20dr20f10} u f40";
        roger.execute(command);
        System.out.println("Done!");
    }
}
